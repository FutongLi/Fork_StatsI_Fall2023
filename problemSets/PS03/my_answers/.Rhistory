# Remove duplicates
}
df
for (i in 1:10) {
df <- data.frame()
merge_df <- data.frame()
df <- rbind(df, dfs[[i]])
merge_df <- rbind(merge_df,df)
# Remove duplicates
}
merge_df
for (i in 1:10) {
df <- data.frame()
df <- rbind(df, dfs[[i]])
print(df)
# Remove duplicates
}
df <- data.frame()
for (i in 1:10) {
df <- rbind(df, dfs[[i]])
print(df)
# Remove duplicates
}
df <- data.frame()
for (i in 1:10) {
df <- rbind(df, dfs[[i]])
df <- unique(df)
print(df)
# Remove duplicates
}
df <- data.frame()
for (i in 1:10) {
df <- rbind(df, dfs[[i]])
print(df)
# Remove duplicates
}
set.seed(2023)
dfs <- lapply(1:10, function(n) data.frame(x = letters[sample(1:26,20,TRUE)], y = sample(1:26,20,TRUE)))
dfs[[8]]
df <- data.frame()
for (i in 1:10) {
df <- rbind(df, dfs[[i]])
print(df)
# Remove duplicates
}
print(df)
df <- unique(df)
print(df)
cal_tstats <- function(mat, grp){
tstats <- numeric()
num_grp <- length(grp)/2
# using boolean value to break into 2 groups
exper_grp <- mat[grp == 1]
contr_grp <- mat[grp == 0]
exper_grp <- matrix(exper_grp, nrow = num_grp)
contr_grp <- matrix(contr_grp, nrow = num_grp)
print(exper_grp)
#print(contr_grp)
for (i in 1:num_grp){
res <- t.test(exper_grp[i, ], contr_grp[i, ])
tstats <- c(tstats, res$statistic)
}
tstats <- data.frame(experiment = seq(1, 100), t-statistic = tstats)
set.seed(2023)
n <- 200
m <- 1000
mat <- matrix(rnorm(m * n, mean = 20, sd = 3), nrow = 200)
mat
View(mat)
calculate_t_statistics <- function(mat, grp) {
# Initialize an empty vector to store t-statistics
tstats <- numeric(ncol(mat))
# Loop through each experiment
for (i in 1:ncol(mat)) {
# Subset the data for the experimental and control groups
experimental_data <- mat[grp == 1, i]
control_data <- mat[grp == 0, i]
print(experimental_data)
# Perform t-test using t.test() function
t_result <- t.test(experimental_data, control_data)
# Extract the t-statistic from the t-test result
t_statistic <- t_result$statistic
# Store the t-statistic in the tstats vector
tstats[i] <- t_statistic
}
# Return the vector of t-statistics
return(tstats)
}
# For simplicity, let's assume that assignment to control and experimental groups is always the same
grp <- rep(0:1, times = 100)
# Calculate t-statistics for each experiment
calculate_t_statistics(mat, grp)
n <- 6
m <- 5
mat <- matrix(rnorm(m * n, mean = 20, sd = 3), nrow = 10)
grp <- rep(0:1, times = 5)
# Calculate t-statistics for each experiment
calculate_t_statistics(mat, grp)
set.seed(2023)
n <- 200
m <- 1000
mat <- matrix(rnorm(m * n, mean = 20, sd = 3), nrow = 200)
experimental_data
experimental_data <- mat[grp == 1, i]
experimental_data
experimental_data
experimental_data <- mat[grp == 1]
experimental_data
experimental_data
grp <- rep(0:1, times = 100)
experimental_data <- mat[grp == 1]
experimental_data
grp
length(mat)
experimental_data <- matrix(experimental_data, nrow = m)
experimental_data
View(experimental_data)
cal_tstats <- function(mat, grp){
# initialize some objects
tstats <- numeric()
num_grp <- m
# using boolean value to break into 2 groups
exper_grp <- mat[grp == 1]
contr_grp <- mat[grp == 0]
exper_grp <- matrix(exper_grp, nrow = num_grp)
contr_grp <- matrix(contr_grp, nrow = num_grp)
#print(exper_grp)  # for debugging
#print(contr_grp)  # for debugging
for (i in 1:num_grp){
res <- t.test(exper_grp[, i], contr_grp[, i])
tstats <- c(tstats, res$statistic)
}
# store results in a df
tstats <- data.frame(tstats = tstats)
return(tstats)
}
# print the result
print(cal_tstats(mat, grp))
cal_tstats <- function(mat, grp){
# initialize some objects
tstats <- numeric()
# using boolean value to break into 2 groups
exper_grp <- mat[grp == 1]
contr_grp <- mat[grp == 0]
exper_grp <- matrix(exper_grp, nrow = m)
contr_grp <- matrix(contr_grp, nrow = m)
#print(exper_grp)  # for debugging
#print(contr_grp)  # for debugging
for (i in 1:m){
res <- t.test(exper_grp[, i], contr_grp[, i])
tstats <- c(tstats, res$statistic)
}
# store results in a df
tstats <- data.frame(tstats = tstats)
return(tstats)
}
# print the result
print(cal_tstats(mat, grp))
str(experimental_data)
experimental_data <- matrix(experimental_data, nrow = m, byrow = TRUE)
cal_tstats <- function(mat, grp){
# initialize some objects
tstats <- numeric()
# using boolean value to break into 2 groups
exper_grp <- mat[grp == 1]
contr_grp <- mat[grp == 0]
exper_grp <- matrix(exper_grp, nrow = m, byrow = TRUE)
contr_grp <- matrix(contr_grp, nrow = m, byrow = TRUE)
#print(exper_grp)  # for debugging
#print(contr_grp)  # for debugging
for (i in 1:m){
res <- t.test(exper_grp[, i], contr_grp[, i])
tstats <- c(tstats, res$statistic)
}
# store results in a df
tstats <- data.frame(tstats = tstats)
return(tstats)
}
# print the result
print(cal_tstats(mat, grp)
# print the result
print(cal_tstats(mat, grp))
print(cal_tstats(mat, grp))
str(experimental_data)
experimental_data[[1]]
experimental_data[[1, ]]
experimental_data[1, ]
cal_tstats <- function(mat, grp){
# initialize some objects
tstats <- numeric()
# using boolean value to break into 2 groups
exper_grp <- mat[grp == 1]
contr_grp <- mat[grp == 0]
exper_grp <- matrix(exper_grp, nrow = m, byrow = TRUE)
contr_grp <- matrix(contr_grp, nrow = m, byrow = TRUE)
#print(exper_grp)  # for debugging
#print(contr_grp)  # for debugging
for (i in 1:m){
res <- t.test(exper_grp[i, ], contr_grp[i, ])
tstats <- c(tstats, res$statistic)
}
# store results in a df
tstats <- data.frame(tstats = tstats)
return(tstats)
}
# print the result
print(cal_tstats(mat, grp))
# print the result
print(head(cal_tstats(mat, grp)))
set.seed(2023)
n <- 200
m <- 1000
mat <- matrix(rnorm(m * n, mean = 20, sd = 3), nrow = 200)
# For simplicity, let's assume that assignment to control and experimental groups is always the same
grp <- rep(0:1, times = 100)
# Function to calculate t-statistics for each experiment
calculate_t_statistics <- function(mat, grp) {
# Initialize an empty vector to store t-statistics
tstats <- numeric(ncol(mat))
# Loop through each experiment
for (i in 1:ncol(mat)) {
# Subset the data for the experimental and control groups
experimental_data <- mat[grp == 1, i]
control_data <- mat[grp == 0, i]
# Perform t-test using t.test() function
t_result <- t.test(experimental_data, control_data)
# Extract the t-statistic from the t-test result
t_statistic <- t_result$statistic
# Store the t-statistic in the tstats vector
tstats[i] <- t_statistic
}
# Return the vector of t-statistics
return(tstats)
}
# Calculate t-statistics for each experiment
t_statistics <- calculate_t_statistics(mat, grp)
# Print the calculated t-statistics
print(t_statistics)
q12
library("readr")
library("dplyr")
PATH <- "/Users/poisson/Documents/Trinity/Msc in ADSD/Sem02_ComputerProg/Week6_Oct 16 Data Wrangling/kaggle_survey_2022_responses(1).csv"
questions <- read_csv(PATH, n_max = 1)
typeof(questions)
class(questions)
questions[, 31:45]
kaggle2022 <- read_csv(PATH, col_names = names(questions), skip = 2)
head(kaggle2022, 5)
q12 <- kaggle2022[, 31:45]
nrow(q12)
ncol(Q12)
q12
View(q12)
q12 <- kaggle2022 %>%
select(starts_with('Q12_'))  %>%
tidyr::pivot_longer(cols = everything(), names_to = 'programming languages', values_to = "value" )
q12
count(q12, value)
q12 <- q12 %>%
dplyr::filter(!is.na(value))
q12
q12 <- q12 %>%
dplyr::filter(!is.na(value)) %>%
count(value)
q12
sum(q12[n])
sum(q12["n"])
dim(kaggle2022)
nrow(kaggle2022)
q12 <- q12 %>%
dplyr::mutate(percent_lang = n/nrow(kaggle2022)*100) %>%
arrange(desc(percent_lang))
q12
# remove objects
rm(list=ls())
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# here is where you load any necessary packages
# ex: stringr
lapply(c("stargazer", "ggplot2"),  pkgTest)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# read in data
inc.sub <- read.csv("https://raw.githubusercontent.com/ASDS-TCD/StatsI_Fall2023/main/datasets/incumbents_subset.csv")
View(inc.sub)
###### Q1 #####
# check if value is na
inc.sub$voteshare[is.na(inc.sub$voteshare)]
inc.sub$difflog[is.na(inc.sub$difflog)]
inc.sub$presvote[is.na(inc.sub$presvote)]
# Fit model
model1 <- lm(difflog ~ voteshare, data = inc.sub)
summary(model1)
View(inc.sub)
inc.sub$voteshare[is.na(inc.sub$voteshare)]
inc.sub$difflog[is.na(inc.sub$difflog)]
inc.sub$presvote[is.na(inc.sub$presvote)]
# Fit model
model1 <- lm(difflog ~ voteshare, data = inc.sub)
summary(model1)
# Fit model
model1 <- lm(voteshare ~ difflog, data = inc.sub)
summary(model1)
model1 <- lm(presvote ~ difflog, data = inc.sub)
model2 <- lm(presvote ~ difflog, data = inc.sub)
summary(model2)
model3 <- lm(voteshare ~ presvote, data = inc.sub)
summary(model3)
summary(model5)
model5 <- lm(voteshare ~ difflog + presvote, data = inc.sub)
summary(model5)
nobs(model5)
nobs(model1)
# Get Latex table
stargazer(model1)
coefplot(model5)
scatter1 <-
ggplot(data = inc.sub,
mapping = aes(x = difflog),
y = voteshare)) +
scatter1 <-
ggplot(data = inc.sub,
mapping = aes(x = difflog),
y = voteshare) +
geom_point() +
geom_smooth(method='lm',col="black") # Add regression line
scatter1
scatter1 <-
ggplot(data = inc.sub,
mapping = aes(x = difflog,
y = voteshare)) +
geom_point() +
geom_smooth(method='lm',col="black") # Add regression line
scatter1
scatter1 <-
ggplot(data = inc.sub,
mapping = aes(x = difflog,
y = voteshare)) +
geom_point(color = "blue") +
geom_smooth(method='lm',col="black") # Add regression line
scatter1
scatter2 <-
ggplot(data = inc.sub,
mapping = aes(x = difflog,
y = presvote)) +
geom_point(color = "yellow") +
geom_smooth(method='lm',col="black") # Add regression line
scatter2
scatter3 <-
ggplot(data = inc.sub,
mapping = aes(x = presvote,
y = voteshare)) +
geom_point(color = "green") +
geom_smooth(method='lm',col="black") # Add regression line
scatter3
View(model1)
# Save residuals as objects
resudual <- model[2]
resudual <- model1[2]
resudal1
resudual1 <- model1[2]
resudal1
resudual1 <- model1[2]
resudual1
resudual1 <- model1$residuals
resudual1
type(resudual1)
typeof(resudual1)
class(resudual1)
resudual2 <- model2$residuals
resudual2
View(resudual)
head(resudual2)
rm(resudual)
model4<- lm(residual1 ~ residual2, data = inc.sub)
model4<- lm(residual1 ~ residual2)
residual1 <- model1$residuals
residual1
residual2 <- model2$residuals
head(residual2)
model4<- lm(residual1 ~ residual2)
summary(model4)
scatter4 <-
ggplot(data = inc.sub,
mapping = aes(x = residual1,
y = residual2)) +
geom_point(color = "orange") +
geom_smooth(method='lm',col="black") # Add regression line
scatter4
scatter4 <-
ggplot(data = inc.sub,
mapping = aes(x = residual2,
y = residual1)) +
geom_point(color = "orange") +
geom_smooth(method='lm',col="black") # Add regression line
scatter4
scatter4 <-
ggplot(
mapping = aes(x = residual2,
y = residual1)) +
geom_point(color = "orange") +
geom_smooth(method='lm',col="black") # Add regression line
scatter4
stargazer(model1, model2, model3, model4, model5)
# Get Latex table
stargazer(model1)
summary(model1)
summary(model1)
inc.sub$voteshare[is.na(inc.sub$voteshare)]
inc.sub$difflog[is.na(inc.sub$difflog)]
View(scatter1)
scatter1
residual1
head(residual1)
head(residual1,5)
head(residual1,3)
mean(residual1)
summary(model1)
median(residual1)
View(model1)
inc.sub$presvote[is.na(inc.sub$presvote)]
model2 <- lm(presvote ~ difflog, data = inc.sub)
summary(model2)
model1 <- lm(voteshare ~ difflog, data = inc.sub)
summary(model1)
stargazer(model2)
scatter2 <-
ggplot(data = inc.sub,
mapping = aes(x = difflog,
y = presvote)) +
geom_point(color = "yellow") +
geom_smooth(method='lm',col="black") # Add regression line
scatter2
# Get Latex table
stargazer(model1)
model3 <- lm(voteshare ~ presvote, data = inc.sub)
summary(model3)
stargazer(model3)
scatter3 <-
ggplot(data = inc.sub,
mapping = aes(x = presvote,
y = voteshare)) +
geom_point(color = "lightblue") +
geom_smooth(method='lm',col="black") # Add regression line
scatter3
model4<- lm(residual1 ~ residual2)
summary(model4)
scatter4 <-
ggplot(
mapping = aes(x = residual2,
y = residual1)) +
geom_point(color = "orange") +
geom_smooth(method='lm',col="black") # Add regression line
scatter4
stargazer(model4)
residual2 <- model2$residuals
0.2058,	Adjusted R-squared:  0.2056
residual2 <- model2$residuals
model4<- lm(residual1 ~ residual2)
summary(model4)
model1 <- lm(voteshare ~ difflog, data = inc.sub)
summary(model1)
# Save residuals as objects
residual1 <- model1$residuals
View(model1)
rs<-resid(model1)
model4<- lm(residual1 ~ residual2)
summary(model4)
scatter4 <-
ggplot(
mapping = aes(x = residual2,
y = residual1)) +
geom_point(color = "orange") +
geom_smooth(method='lm',col="black") # Add regression line
scatter4
model5 <- lm(voteshare ~ difflog + presvote, data = inc.sub)
summary(model5)
stargazer(model4)
model4<- lm(residual1 ~ residual2)
summary(model4)
residual2 <- model2$residuals
residual2
scatter4 <-
ggplot(
mapping = aes(x = residual2,
y = residual1)) +
geom_point(color = "orange") +
geom_smooth(method='lm',col="black") # Add regression line
scatter4
model4<- lm(residual1 ~ residual2)
summary(model4)
model5 <- lm(voteshare ~ difflog + presvote, data = inc.sub)
summary(model5)
stargazer(model5)
summary(model1)
summary(model2)
model5 <- lm(voteshare ~ difflog + presvote, data = inc.sub)
summary(model5)
model4<- lm(residual1 ~ residual2)
summary(model4)
