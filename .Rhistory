labs(title = "Plot of Fuel Efficiency by Weight for 32 Cars", subtitle = "Number of cylinders; size = horsepower") +
xlab("weight (1000 lbs)")
help(mpg)
ggplot(mtcars, aes(wt, mpg, size = hp)) +
geom_text(aes(size = hp, label = cyl, color = am)) +
geom_smooth(aes(linetype = cyl), color = "grey", size = 0.5, se = FALSE, show.legend = FALSE) +
guides(size = "none") +
theme_classic() +
theme(legend.title = element_blank(), legend.justification = c(1, 1), legend.position = c(1, 1)) +
scale_color_manual(labels = c("manual", "automatic"), values = c("blue", "red")) +
labs(title = "Plot of Fuel Efficiency by Weight for 32 Cars", subtitle = "Number of cylinders; size = horsepower") +
xlab("weight (1000 lbs)")
getwd()
?setwd()
install.packages('IRkernel')
install.packages('IRkernel')
IRkernel::installspec(user = FALSE)
q()
test <- c(1,2,3,4)
test[]
test[1]
test[:2]
test[1:2]
test[-3]
test[seq(1,4,2)]
sub_test <- test[-3]
sub_test[c(true,false)]
sub_test[c(TRUE, FALSE)]
test + 1
?double
mixed_list <- list(2:4, "a", B = c(TRUE, FALSE, FALSE), list("x", 1L))
View(mixed_list)
str(mixed_list[3])
mixed_list[3]
mixed_list[[3]]
num <- 1:10
ifelse(num %% 2 == 0, "even", "odd")[3]
num <- 20:30
ifelse(num %% 2 == 0, "even", "odd")[3]
ifelse(num %% 2 == 0, "even", "odd")[22]
ifelse(num %% 2 == 0, "even", "odd")["22"]
sym.info()
syms.info()
sys.info()
if (c(TRUE, FALSE)) 1
if (c(TRUE, FALSE))
if (c(TRUE, FALSE)) 1
if (c(TRUE, FALSE)) {1}
if (c(TRUE, FALSE)) {2}
m <- matrix(1:10, nrow = 2, nol = 5)
m <- matrix(1:10, nrow = 2, ncol = 5)
View(m)
m
m[1,2]
m[c(TRUE), 4]
m[c(TRUE, FALSE), 4]
set.seed(2023)
l <- list(
mapply(assign, letters, 1:26),
A = array(1:60, c(5,2,3)),
M = matrix(1:50, c(10,5)),
test = t.test(rnorm(100, -1), rnorm(100, 2)),
model = lm(
y ~ x + z,
data = list(y = rnorm(100), x = rnorm(100), z = rnorm(100))
)
)
View(l)
l[A]
l["A"]
l["A[FAlSE, 2, ]"]
l["A[, 2, ]"]
l[A[, 2, ]]
str(l)
l[1]
l[2]
l[2[, 2, ]]
l[2[1, 2, 3]]
l$[1, 2, 3]]
l$A[1, 2, 3]]
l$A[1, 2, 3]
l$A[, 2, ]
L$A[c(FALSE, TRUE), 2, ]
l$A[c(FALSE, TRUE), 2, ]
l$A[, 2, , drop = FALSE]
l[1]
l$A
l[1]
l[1][2]
l[1][a]
l[1]["a"]
str(l[1])
letters <- L[1]
letters <- l[1]
letters[a]
letters["a"]
letters(a)
letters[2]
cons <- c("b", "c", "d", "f", "g", "h", "j", "k", "l", "m", "n", "p", "q", "r", "s", "t", "v", "w", "x", "y", "z")
letters %in% cons
letters <- l[1]
letters
letters %in% cons
letters[cons]
str(l[1])
letters[1]
letters[2]
l[[1]]
value_a <- letters["a"]
value_a
View(value_a)
l[1]
l[[1]][1]
l[[1]][1,2]
l[[1]][c(1,2)]
l[[1]][cons]
name(l[[1]][cons])
names(l[[1]][cons])
#(3)
l$M
#(3)
l$M[c(1, 3, 5, 7, 9)]
#(3)
l$M[c(1, 3, 5, 7, 9), ]
#(4)
l$test
typeof(l$test)
t-test <- l$test
t_test <- l$test
View(t_test)
t_test
t_test$p.value
#(5)
l$model
typeof(l$model)
l$model$coefficients
vec <- sample(c("1", "0", "o"), size = 100, replace = TRUE)
typeof(vec)
as.integer(vec)
as.integer(vec)
is.na(vec)
vec %in% "o"
which(vec %in% "o")
int <- as.integer(vec)
int
is.na(int)
which(is.na(int))
na_from_int <- which(is.na(int))
length(na_from_int)
prop <- length(na_from_int)/lenght(vec)
prop <- length(na_from_int)/lengh(vec)
prop <- length(na_from_int)/length(vec)
prop
?nchar()
set.seed(2023)
educ <- rpois(1000, 2)
educ <- ifelse(educ > 4, 4, educ)
summary(educ)
his(educ)
hist(educ)
table(educ)
edcu <- factor(educ)
educ
table <-educ
table(-educ)
typeof(-educ)
typeof(educ)
class(educ)
edcu <- factor(educ, levels = levels)
edcu <- factor(educ, levels = educ_levels)
educ_levels <- c("No formal education ",
"Primary Education",
"Secondary Education",
"College Education",
"Post-graduate Education")
edcu <- factor(educ, levels = educ_levels)
educ
table(educ)
edcu <- factor(educ, levels = educ_levels)
levels(educ)
edcu <- factor(educ)
levels(educ)
table(educ)
class(educ)
levels(educ)
educ <- factor(educ)
levels(educ)
table(educ)
class(educ)
typeof(educ)
max(educ)
educ <- reveal(educ, ref = 2 )
educ <- relevel(educ, ref = 2 )
levles(educ)
levels(educ)
educ <- relevel(educ, ref = "2" )
levels(educ)
educ <- factor(educ)
educ <- factor(educ)
levels(educ)
typeof(educ)
educ <- relevel(educ, ref = "2" )
levels(educ)
set.seed(2023)
educ <- rpois(1000, 2)
educ <- ifelse(educ > 4, 4, educ
educ <- factor(educ)
educ <- relevel(educ, ref = "2" )
hist(educ)
table(educ)
set.seed(2023)
educ <- rpois(1000, 2)
educ <- ifelse(educ > 4, 4, educ)
hist(educ)
table(educ)
educ <- factor(educ)
levels(educ)
typeof(educ)
educ <- relevel(educ, ref = "2" )
levels(educ)
table(educ)
names(educ)
letters
int <- seq(1:length(letters))
int
int <- seq(1:length(letters))
int
lenghth(letters)
length(letters)
letters
length(letters)
int <- seq(1:26)
int
names(int) <- letters
int
vows <- c("a", "e", "i", "o", "u")
subint <- int[vows]
subint
letters <- c('a','b','c','d')
length(letters)
int
int
int <- seq(1:4)
int
names(int) <- letters
int
vows <- c("a", "b")
subint <- int[vows]
subint
levels(educ)
educ <- factor(educ, levels = c("0" "1" "2" "3" "4")
educ <- factor(educ, levels = c(0, 1, 2, 3, 4)
labels = c("No formal education ",
educ <- factor(educ, levels = c("0", "1", "2", "3", "4")
labels = c("No formal education ",
educ <- factor(educ, levels = c("0", "1", "2", "3", "4")
labels = c("No formal education ",
?rpois
set.seed(2023)
educ <- rpois(1000, 2)
?rpois
educ <- ifelse(educ > 4, 4, educ)
summary(educ)
hist(educ)
table(educ)
educ_levels <- c("No formal education ",
"Primary Education",
"Secondary Education",
"College Education",
"Post-graduate Education")
educ <- factor(educ, levels = c("0", "1", "2", "3", "4"),
labels = c("No formal education ",
"Primary Education",
"Secondary Education",
"College Education",
"Post-graduate Education"))
levels(educ)
typeof(educ)
table(educ)
educ <- relevel(educ, ref = "2" )
tab_educ <- table(educ)
educ <- relevel(educ, ref = which.max(tab_educ))
levels(educ)
table(educ)
which.max(tab_educ)
class(educ)
set.seed(2023)
vars <- list(
var1 = rexp(1000),
var2 = rnorm(1000, -2.75, 3),
var3 = rchisq(1000, 2),
var4 = rt(1000, 30),
var5 = rbeta(1000, 5, 2)
)
var1
View(vars)
vars[var1]
vars["var1"]
mean_var <= mean(vars[1])
mean_var <- mean(vars[1])
mean_var <- mean(vars[var1])
For (var in vars) {
mean_var <- mean(vars["var1"])
vars[1]
mean(vars[1])
median(var1[1])
median(vars[1])
typeof(vars[1])
a <- list(2,4,5)
mean(a)
View(vars)
typeof(vars[1])
typeof(vars[[1])
typeof(vars[[1]])
class(vars[1])
class(vars[[1]])
as.interge(vars[1])
as.integer(vars[1])
vars[[1]]
vars[1][1]
vars[1][1]
vars[1][2]
vars[var1][1]
vars["var1"][1]
vars["var1"][2]
vars[["var1"]][2]
vars[[1]][3]
mean[[1]]
mean(vars[[1]])
mean_var <- mean(vars[[1]])
mean_var
median_var <- median(vars[[1]])
median_var
x <- seq(5)
factorial <- 1
for (i in x) {
factorial <- factorial * i }
factorial
x
if (mean_var < median_var) {
dist = "left skew"
} else if (mean_var > median_var){
dist = "right skew"
} else {
dist = "normal distributiob "
}
dist
x <- seq(1:5)
For ( i in x ) {
x <- seq(1:5)
x
For ( i in x ) {
For (i in x) {
x <- seq(1:5)
for (i in x)
{if (mean(vars[[i]]) < median(vars[[i]])) {
dist = "left skew"
} else if (mean(vars[[i]]) > median(vars[[i]])) {
dist = "right skew"
} else {
dist = "normal distributiob "
}
dist}
dist
x <- seq(1:5)
for (i in x)
{if (mean(vars[[i]]) < median(vars[[i]])) {
dist = "left skew"
} else if (mean(vars[[i]]) > median(vars[[i]])) {
dist = "right skew"
} else {
dist = "normal distributiob "
}}
dist
x <- seq(1:5)
for (i in x)
{if (mean(vars[[i]]) < median(vars[[i]])) {
dist = "left skew"
} else if (mean(vars[[i]]) > median(vars[[i]])) {
dist = "right skew"
} else {
dist = "normal distributiob "
}
print(dist)}
# Get working directory
getwd()
# Set working directory
setwd("/Users/poisson/Documents/GitHub/Fork_Statsl Fall2023")
# Load data
df_not_tidy <- read.csv("datasets/movies.csv")
# First step, look at data
View(df_not_tidy)
str(df_not_tidy)
# First step, look at data
View(df_not_tidy)
# Load data
df_not_tidy <- read.csv("datasets/movies.csv")
# First step, look at data
View(df_not_tidy)
str(df_not_tidy)
head(df_not_tidy)
summary(df_not_tidy)
# Load tidy version of data
# The data is prepared using the data_wraning.R script.
df <- readRDS("datasets/movies.rds")
str(df)
class(df$genre)
levels(df$genre)
df$genre
# Contingency table
table(df$genre, # Genre
df$critics_rating) # Rating
# Option 1:
# Dataframe subsetting: df[rows, columns]
df_s <- df[df$genre=="Comedy" |
df$genre=="Drama" |
df$genre=="Documentary", ] #"|"means and
View(df_s)
# Install and load tidyverse
# Adopted from: https://stackoverflow.com/questions/4090169/elegant-way-to-check-for-missing-packages-and-install-them
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)
}
library(tidyverse)
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)
}
df_s <- subset(df, df$genre %in% c("Comedy","Documentary","Drama"))
# Contingency table
table(df_s$genre, # Genre
df_s$critics_rating) # Rating
levels(df_s$genre)
df_s$genre <- droplevels(df_s$genre)
# Contingency table
table(df_s$genre, # Genre
df_s$critics_rating) # Rating
# Add marginal distributions
addmargins(table(df_s$genre, # Genre
df_s$critics_rating)) # Rating
# Joint probability
prop.table(table(df_s$genre,
df_s$critics_rating))
63/444
# Over rows --> Rating conditional on genre
prop.table(table(df_s$genre, # rows
df_s$critics_rating), # columns
margin = 1) # over rows
# Over rows --> Rating conditional on genre
prop.table(table(df_s$genre, # rows
df_s$critics_rating), # columns
margin = 1) # over rows
# Over rows --> Rating conditional on genre
prop.table(table(df_s$genre, # rows
df_s$critics_rating), # columns
margin = 2) # over rows
# Over rows --> Rating conditional on genre
prop.table(table(df_s$genre, # rows
df_s$critics_rating), # columns
margin = 1) # over rows
# Add marginal distributions
addmargins(table(df_s$genre, # Genre
df_s$critics_rating)) # Rating
63/190
prop.table(table(df_s$genre, # rows
df_s$critics_rating), # columns
margin = 2) # over rows
# Bar plot
barplot(prop.table(table(df_s$genre,
df_s$critics_rating), margin=1),
xlab="Ranking",
ylab="Proportions",
main="Critics Rating by Genre",
beside=TRUE,
legend.text = TRUE,
args.legend = list(x=12,
y=0.7,
cex = 0.8,
box.col = "white"))
# Add marginal distributions
# Over rows --> Rating conditional on genre
addmargins(prop.table(table(df_s$genre,
df_s$critics_rating),
margin = 1)) # over rows
# Round
round(addmargins(prop.table(table(df_s$genre,
df_s$critics_rating),
margin = 1)), 2)
png(filename = "tutorials/03/barplot.png",
width = 600,
height = 350)
barplot(prop.table(table(df_s$genre,
df_s$critics_rating),margin=1),
xlab="Ranking",
ylab="Proportions",
main="Critics Rating by Genre",
beside=TRUE,
legend.text = TRUE,
args.legend = list(x=12,
y=0.7,
cex = 0.8,
box.col = "white"))
dev.off()
# Run Chi square test
chisq.test(df_s$genre,
df_s$critics_rating)
# Check p-value
sprintf("%.20f",1.097e-12)
# A little side note, look at residuals
chi <- chisq.test(df_s$genre,
df_s$critics_rating)
