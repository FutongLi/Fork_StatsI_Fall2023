print(df)
cal_tstats <- function(mat, grp){
tstats <- numeric()
num_grp <- length(grp)/2
# using boolean value to break into 2 groups
exper_grp <- mat[grp == 1]
contr_grp <- mat[grp == 0]
exper_grp <- matrix(exper_grp, nrow = num_grp)
contr_grp <- matrix(contr_grp, nrow = num_grp)
print(exper_grp)
#print(contr_grp)
for (i in 1:num_grp){
res <- t.test(exper_grp[i, ], contr_grp[i, ])
tstats <- c(tstats, res$statistic)
}
tstats <- data.frame(experiment = seq(1, 100), t-statistic = tstats)
set.seed(2023)
n <- 200
m <- 1000
mat <- matrix(rnorm(m * n, mean = 20, sd = 3), nrow = 200)
mat
View(mat)
calculate_t_statistics <- function(mat, grp) {
# Initialize an empty vector to store t-statistics
tstats <- numeric(ncol(mat))
# Loop through each experiment
for (i in 1:ncol(mat)) {
# Subset the data for the experimental and control groups
experimental_data <- mat[grp == 1, i]
control_data <- mat[grp == 0, i]
print(experimental_data)
# Perform t-test using t.test() function
t_result <- t.test(experimental_data, control_data)
# Extract the t-statistic from the t-test result
t_statistic <- t_result$statistic
# Store the t-statistic in the tstats vector
tstats[i] <- t_statistic
}
# Return the vector of t-statistics
return(tstats)
}
# For simplicity, let's assume that assignment to control and experimental groups is always the same
grp <- rep(0:1, times = 100)
# Calculate t-statistics for each experiment
calculate_t_statistics(mat, grp)
n <- 6
m <- 5
mat <- matrix(rnorm(m * n, mean = 20, sd = 3), nrow = 10)
grp <- rep(0:1, times = 5)
# Calculate t-statistics for each experiment
calculate_t_statistics(mat, grp)
set.seed(2023)
n <- 200
m <- 1000
mat <- matrix(rnorm(m * n, mean = 20, sd = 3), nrow = 200)
experimental_data
experimental_data <- mat[grp == 1, i]
experimental_data
experimental_data
experimental_data <- mat[grp == 1]
experimental_data
experimental_data
grp <- rep(0:1, times = 100)
experimental_data <- mat[grp == 1]
experimental_data
grp
length(mat)
experimental_data <- matrix(experimental_data, nrow = m)
experimental_data
View(experimental_data)
cal_tstats <- function(mat, grp){
# initialize some objects
tstats <- numeric()
num_grp <- m
# using boolean value to break into 2 groups
exper_grp <- mat[grp == 1]
contr_grp <- mat[grp == 0]
exper_grp <- matrix(exper_grp, nrow = num_grp)
contr_grp <- matrix(contr_grp, nrow = num_grp)
#print(exper_grp)  # for debugging
#print(contr_grp)  # for debugging
for (i in 1:num_grp){
res <- t.test(exper_grp[, i], contr_grp[, i])
tstats <- c(tstats, res$statistic)
}
# store results in a df
tstats <- data.frame(tstats = tstats)
return(tstats)
}
# print the result
print(cal_tstats(mat, grp))
cal_tstats <- function(mat, grp){
# initialize some objects
tstats <- numeric()
# using boolean value to break into 2 groups
exper_grp <- mat[grp == 1]
contr_grp <- mat[grp == 0]
exper_grp <- matrix(exper_grp, nrow = m)
contr_grp <- matrix(contr_grp, nrow = m)
#print(exper_grp)  # for debugging
#print(contr_grp)  # for debugging
for (i in 1:m){
res <- t.test(exper_grp[, i], contr_grp[, i])
tstats <- c(tstats, res$statistic)
}
# store results in a df
tstats <- data.frame(tstats = tstats)
return(tstats)
}
# print the result
print(cal_tstats(mat, grp))
str(experimental_data)
experimental_data <- matrix(experimental_data, nrow = m, byrow = TRUE)
cal_tstats <- function(mat, grp){
# initialize some objects
tstats <- numeric()
# using boolean value to break into 2 groups
exper_grp <- mat[grp == 1]
contr_grp <- mat[grp == 0]
exper_grp <- matrix(exper_grp, nrow = m, byrow = TRUE)
contr_grp <- matrix(contr_grp, nrow = m, byrow = TRUE)
#print(exper_grp)  # for debugging
#print(contr_grp)  # for debugging
for (i in 1:m){
res <- t.test(exper_grp[, i], contr_grp[, i])
tstats <- c(tstats, res$statistic)
}
# store results in a df
tstats <- data.frame(tstats = tstats)
return(tstats)
}
# print the result
print(cal_tstats(mat, grp)
# print the result
print(cal_tstats(mat, grp))
print(cal_tstats(mat, grp))
str(experimental_data)
experimental_data[[1]]
experimental_data[[1, ]]
experimental_data[1, ]
cal_tstats <- function(mat, grp){
# initialize some objects
tstats <- numeric()
# using boolean value to break into 2 groups
exper_grp <- mat[grp == 1]
contr_grp <- mat[grp == 0]
exper_grp <- matrix(exper_grp, nrow = m, byrow = TRUE)
contr_grp <- matrix(contr_grp, nrow = m, byrow = TRUE)
#print(exper_grp)  # for debugging
#print(contr_grp)  # for debugging
for (i in 1:m){
res <- t.test(exper_grp[i, ], contr_grp[i, ])
tstats <- c(tstats, res$statistic)
}
# store results in a df
tstats <- data.frame(tstats = tstats)
return(tstats)
}
# print the result
print(cal_tstats(mat, grp))
# print the result
print(head(cal_tstats(mat, grp)))
set.seed(2023)
n <- 200
m <- 1000
mat <- matrix(rnorm(m * n, mean = 20, sd = 3), nrow = 200)
# For simplicity, let's assume that assignment to control and experimental groups is always the same
grp <- rep(0:1, times = 100)
# Function to calculate t-statistics for each experiment
calculate_t_statistics <- function(mat, grp) {
# Initialize an empty vector to store t-statistics
tstats <- numeric(ncol(mat))
# Loop through each experiment
for (i in 1:ncol(mat)) {
# Subset the data for the experimental and control groups
experimental_data <- mat[grp == 1, i]
control_data <- mat[grp == 0, i]
# Perform t-test using t.test() function
t_result <- t.test(experimental_data, control_data)
# Extract the t-statistic from the t-test result
t_statistic <- t_result$statistic
# Store the t-statistic in the tstats vector
tstats[i] <- t_statistic
}
# Return the vector of t-statistics
return(tstats)
}
# Calculate t-statistics for each experiment
t_statistics <- calculate_t_statistics(mat, grp)
# Print the calculated t-statistics
print(t_statistics)
q12
library("readr")
library("dplyr")
PATH <- "/Users/poisson/Documents/Trinity/Msc in ADSD/Sem02_ComputerProg/Week6_Oct 16 Data Wrangling/kaggle_survey_2022_responses(1).csv"
questions <- read_csv(PATH, n_max = 1)
typeof(questions)
class(questions)
questions[, 31:45]
kaggle2022 <- read_csv(PATH, col_names = names(questions), skip = 2)
head(kaggle2022, 5)
q12 <- kaggle2022[, 31:45]
nrow(q12)
ncol(Q12)
q12
View(q12)
q12 <- kaggle2022 %>%
select(starts_with('Q12_'))  %>%
tidyr::pivot_longer(cols = everything(), names_to = 'programming languages', values_to = "value" )
q12
count(q12, value)
q12 <- q12 %>%
dplyr::filter(!is.na(value))
q12
q12 <- q12 %>%
dplyr::filter(!is.na(value)) %>%
count(value)
q12
sum(q12[n])
sum(q12["n"])
dim(kaggle2022)
nrow(kaggle2022)
q12 <- q12 %>%
dplyr::mutate(percent_lang = n/nrow(kaggle2022)*100) %>%
arrange(desc(percent_lang))
q12
# how to interprete 0.8408
summary(model_eco)
# Applied Statistical Analysis I
# Tutorial 11: Multiple regression, Interactions
# Remove objects
rm(list=ls())
# Detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# Load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# Load any necessary packages
lapply(c("stargazer","arm","emmeans","ggplot2"),  pkgTest)
# emmeans for interation effects
# Set working directory for current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# Agenda
# (1) Regression analysis
# (2) F test for some coefficient
# (3) Interactions
# (4) Quadratic effects
# Research questions:
# What is the relationship between education and Euroscepticism?
# Load data
df <- read.csv("/Users/poisson/Documents/GitHub/Fork_Statsl Fall2023/datasets/ESS10/ESS10_euroscepticism.csv", row.names="X")
View(df)
# Convert into factor variable
df$edu_cat <- factor(df$edu_cat)
is.factor(df$edu_cat)
# (1) Regression analysis ----------
# Complete case analysis
df_na <- df[complete.cases(df), ]
# Categorical independent variable (manually)
# Create dummy variables
df_na$JuniorCycle <- ifelse(df_na$edu_cat == "Junior Cycle", 1, 0)
df_na$LeavingCertificate <- ifelse(df_na$edu_cat == "Leaving Certificate", 1, 0)
df_na$AdvancedCertificate <- ifelse(df_na$edu_cat == "Advanced Certificate", 1, 0)
df_na$Bachelor <- ifelse(df_na$edu_cat == "Bachelor Degree", 1, 0)
df_na$Postgraduate <- ifelse(df_na$edu_cat == "Postgraduate Degree", 1, 0)
# Fit model (ref=JuniorCycle)
model <- lm(euftf_re~LeavingCertificate+AdvancedCertificate+Bachelor+Postgraduate,data=df_na)
summary(model)
# Change reference category to leaving certificate
model <- lm(euftf_re~JuniorCycle+AdvancedCertificate+Bachelor+Postgraduate,data=df_na)
summary(model)
# Education--Categorical independent variable
is.factor(df_na$edu_cat)
model1 <- lm(euftf_re~edu_cat,data=df_na)
summary(model1)
# Change reference category to leaving certificate
levels(df_na$edu_cat) # First level, "Advanced Certificate"
df_na$edu_cat <- relevel(df_na$edu_cat, ref = 4) # relevel function
levels(df_na$edu_cat) # First level, "Leaving Certificate"
# Refit model
model1 <- lm(euftf_re~edu_cat,data=df_na)
summary(model1)
# in comparsion with people with leaving certificate,
# those post degrees has -.2765 lower euroskecptisim values
# edu levles have no significant effect on euroskecptisim
# Education--Continuous independent variable
model1 <- lm(euftf_re~edlvdie,data=df_na)
summary(model1)
# Add economic dimension
model_eco <- lm(euftf_re~edlvdie + hinctnta,data=df_na)
summary(model_eco)
# Add political dimension
model_pol <- lm(euftf_re~edlvdie + hinctnta + trstplt, data=df_na)
summary(model_pol)
# Add cultural dimension
model_cul <- lm(euftf_re~edlvdie + hinctnta + trstplt + imwbcnt, data=df_na)
summary(model_cul)
# Add socio-economic variables
model_final <- lm(euftf_re~edlvdie + hinctnta + trstplt + imwbcnt + gndr + agea + brncntr, data=df_na)
summary(model_final)
# 当新增变量进入回归时，显著效应消失了怎么解释
# Get Latex table
stargazer(model1,model_eco,model_pol,model_cul,model_final)
# How to visualize results of coefficients?
coefplot(model_final) # 95% Confidence intervals (and 50% CIs)
coefplot(model1, add=TRUE, col.pts="gray")
# but not demostrate p values
# F test for some coefficients -------
# Does adding economic dimension improve fit?
anova(model1, model_eco, test='F')
# how to interprete 0.8408
summary(model_eco)
# we get the same p value with t test
# In which cases is partial F test not equal to t-test?
# Does adding political dimension improve fit?
anova(model1, model_pol, test='F')
# model1 is our baseline model
summary(model_pol)
# more than 2 variable, F test is necessarily needed?
# What about political dimension alone?
model3 <- lm(euftf_re~edlvdie+trstplt,data=df_na)
anova(model1, model3, test='F')
summary(model3)
# Does adding the education dummy set improve fit?
model5 <- lm(euftf_re~hinctnta + trstplt + imwbcnt, data=df_na)
model6 <- lm(euftf_re~hinctnta + trstplt + imwbcnt + edu_cat, data=df_na)
anova(model5, model6, test='F')
summary(model6)
#  Two applications of the f-test：
# (1)
# (2) Test the whole dummmy varible(partial f test)
## 全局F检验可以帮助你判断模型中的所有虚拟变量是否共同对因变量产生显著影响，
## 而部分F检验则允许你检验特定组别之间的差异是否显著。
# In conclusion: When to use partial F test?
# (3) Interactions ------------
# So far, visualizing regression models with categorical independent variables
# Fit model
model1 <- lm(euftf_re~edu_cat+imwbcnt,data=df_na)
# Plot
plot(df_na$imwbcnt, df_na$euftf_re)
abline(model1$coefficients[1], model1$coefficients[6],col="black") # edu_cat=0, "Leaving Certificate"
abline(model1$coefficients[1]+model1$coefficients[2], model1$coefficients[6],col="blue") # edu_cat=1, "Advanced Certificate"
abline(model1$coefficients[1]+model1$coefficients[3], model1$coefficients[6],col="green") # edu_cat=2, "Bachelor"
abline(model1$coefficients[1]+model1$coefficients[4], model1$coefficients[6],col="gray") # edu_cat=3, "Junior Cycle"
abline(model1$coefficients[1]+model1$coefficients[5], model1$coefficients[6],col="orange") # edu_cat=4, "Postgraduate"
legend(7, 10, # Legend
legend=c("Leaving Certificate","Advanced Certificate","Bachelor","Junior Cycle","Postgraduate"),
col=c("black","blue","green","gray","orange"),
pch=1)
# In ggplot
ggplot(df_na, aes(imwbcnt, euftf_re, group = edu_cat)) +
geom_point(aes(colour = edu_cat)) + # Add points
geom_line(data = df_na, aes(y = model1$fitted.values, colour = edu_cat)) # Add regression lines
# A. Add interaction term between, attitudes towards immigration and gender
# (categorical x continuous)
# Recode dummy variables as 0,1; needed for interactions
df_na$gndr <- ifelse(df_na$gndr == 2, 1, 0)
# And convert into factor
df_na$gndr <- factor(df_na$gndr, labels = c("Male", "Female"))
# Fit model
model_int <- lm(euftf_re~edlvdie +
imwbcnt +
gndr +
imwbcnt*gndr, data=df_na)
summary(model_int)
# What is the prediction equation?
# How to interpret the intercept?
# How to interpret the coefficient for education?
# How to interpret the coefficient for attitudes towards immigration?
## women with negative attitudes towards immmigration has 1，10288 lower on euroske
# How to interpret the coefficient for gender
# How to interpret the interaction term?
## hardese to intrepret.
# Get slopes for levels of categorical variables
summary(model_int)$coefficients[3]
summary(model_int)$coefficients[3]+summary(model_int)$coefficients[5]
# Or use emmeans package
emtrends(model_int, ~ gndr, var="imwbcnt")
# Visualize estimated marginal means (EMMs)
emmip(model_int,
gndr ~ imwbcnt,
at=list(imwbcnt=seq(0,10,by=1), gndr=c("Male","Female"), edlvdie=mean(df_na$edlvdie)),
plotit = TRUE,
CIs = TRUE)
# What does this function do?
emmip(model_int,
gndr ~ imwbcnt,
at=list(imwbcnt=seq(0,10,by=1), gndr=c("Male","Female"), edlvdie=mean(df_na$edlvdie)),
plotit = FALSE,
CIs = TRUE)
# We can also use predict
predict(model_int,
newdata=data.frame(imwbcnt=0,gndr="Male",edlvdie=mean(df_na$edlvdie)))
# Prediction equation from model with interaction term
# 7.15015+0.01875*Education-0.47287*Attitudes-1.10277*Gender+0.16751*Attitudes*Gender
# Calculate the marginal mean（just a fancy term), for men, with very negative attitudes
# towards immigration, and mean education level.
## 7.15015+0.01875*mean(df_ba$edlvdie)-0.47287*0-1.10277*0+0.16751*0*0
# What is the marginal effect of changing gender from male to female, in this scenario?
## 7.15015+0.01875*mean(df_na$edlvdie)-0.47287*0-1.10277*1+0.16751*0*1
# B. Add interaction term between, education and whether the person was born in country
# (categorical x categorical)
# Recode dummy variables as 0,1; needed for interactions
df_na$brncntr <- ifelse(df_na$brncntr == 2, 1, 0)
# And convert into factor
df_na$brncntr <- factor(df_na$brncntr, labels = c("Born in country", "Not born in country"))
levels(df_na$brncntr)
# Fit model
model_int2 <- lm(euftf_re~edu_cat +
imwbcnt +
brncntr +
edu_cat*brncntr, data=df_na)
summary(model_int2)
# Visualize estimated marginal means (EMMs)
emmip(model_int2,
brncntr ~ edu_cat,
at=list(edu_cat=c("Leaving Certificate","Advanced Certificate","Bachelor Degree","Junior Cycle","Postgraduate Degree"), brncntr=c("Born in country", "Not born in country"), imwbcnt=mean(df_na$imwbcnt)),
plotit = TRUE,
CIs = TRUE)
# Make your own visualization in ggplot
emm <- emmip(model_int2,
brncntr ~ edu_cat,
at=list(edu_cat=c("Leaving Certificate","Advanced Certificate","Bachelor Degree","Junior Cycle","Postgraduate Degree"), brncntr=c("Born in country", "Not born in country"), imwbcnt=mean(df_na$imwbcnt)),
plotit = FALSE,
CIs = TRUE)
# Build plot  （what's the difference between the plot and the previous one generated by eemip)
plot <- ggplot(data=emm, aes(x=edu_cat, y=yvar, fill=brncntr)) +
geom_bar(stat="identity",position="dodge") +
geom_errorbar(position=position_dodge(.9),width=.25, aes(ymax=UCL, ymin=LCL),alpha=0.3) + # Add error bars
ylab("Predicted level of Euroscepticism") +
xlab("Education levels") +
labs(fill = "Regime type")
plot
# Partial F test for interactions
# Does the interaction effect improve fit?
model_no_int <- lm(euftf_re~edu_cat + imwbcnt + brncntr, data=df_na)
anova(model_no_int, model_int2)
# (4) Quadratic effects -----------
# A. Add a quadratic education term
df_na$edlvdie_edlvdie <- df_na$edlvdie^2
# Is the effect of education quadratic, rather than linear?
model_quad <- lm(euftf_re~edlvdie +
edlvdie_edlvdie +
hinctnta +
trstplt +
imwbcnt, data=df_na)
summary(model_quad)
# Visualize quadratic effect
# Make predictions; How to specify new data?
sort(unique(df_na$edlvdie))
sort(unique(df_na$edlvdie_edlvdie))
mean(df_na$hinctnta)
# Define new data, for which to make predictions
new_data = data.frame(edlvdie=sort(unique(df_na$edlvdie)), # Education
edlvdie_edlvdie=sort(unique(df_na$edlvdie_edlvdie)), # Quadratic education term
hinctnta=mean(df_na$hinctnta), # Income
trstplt=mean(df_na$trstplt), # Political trust
imwbcnt=mean(df_na$imwbcnt)) # Attitudes towards immigration
new_data
# Make predictions for new data
preds <- predict(model_quad, newdata=new_data)
preds
# Scatter plot
par(mar = c(5, 5, 2, 2)) # Change margins in plot manually
plot(jitter(df_na$edlvdie,2),jitter(df_na$euftf,2))
lines(sort(unique(df_na$edlvdie)),preds) # Add predicted outcomes
# B. Add a quadratic income term
df_na$hinctnta_hinctnta <- df_na$hinctnta^2
# Is the effect of income quadratic, rather than linear?
model_quad2 <- lm(euftf_re~edlvdie +
hinctnta +
hinctnta_hinctnta,
data=df_na)
summary(model_quad2)
# Visualize quadratic effect
# Define new data, for which to make predictions
new_data = data.frame(hinctnta=sort(unique(df_na$hinctnta)), # Income
hinctnta_hinctnta=sort(unique(df_na$hinctnta_hinctnta)), # Quadratic income term
edlvdie=mean(df_na$edlvdie)) # Education
new_data
# Make predictions for new data
preds <- predict(model_quad2, newdata=new_data)
preds
# Scatter plot
par(mar = c(5, 5, 2, 2)) # Change margins in plot manually
plot(jitter(df_na$hinctnta,2), jitter(df_na$euftf,2))
lines(sort(unique(df_na$hinctnta)), preds) # Add predicted outcomes
summary(model)
x1
x1 <- c(1,2,3)
y1 <- c(4, 5, 6)
lm(x1, y1)
?lm
lm(x1~y1)
# Fit model
model1 <- lm(euftf_re~edu_cat+imwbcnt,data=df_na)
summry(model1)
summary(model1)
# Fit model
model1 <- lm(euftf_re~edu_cat+imwbcnt,data=df_na)
summary(model1)
