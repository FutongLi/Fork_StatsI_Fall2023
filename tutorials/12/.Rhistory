rm(list=ls())
# Detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# Load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# Load any necessary packages
lapply(c("car"),  pkgTest)
getwd()
# Load data
df <- read.csv("/Users/poisson/Documents/GitHub/Fork_Statsl Fall2023/datasets/ESS10/ESS10_euroscepticism.csv", row.names="X")
View(df)
# Convert categorical variables into factor
df$edu_cat <- factor(df$edu_cat)
df$gndr <- ifelse(df$gndr == 2, 1, 0)
df$gndr <- factor(df$gndr, labels = c("Male", "Female"))
df$brncntr <- ifelse(df$brncntr == 2, 1, 0)
df$brncntr <- factor(df$brncntr, labels = c("Born in country", "Not born in country"))
# Complete case analysis
df_na <- df[complete.cases(df), ]
df_na
Viewï¼ˆdf_na)
View(df_na)
# Reset index
rownames(df_na) <- 1:nrow(df_na)
View(df_na)
# Final model
model_final <- lm(euftf_re~edlvdie +
hinctnta +
trstplt +
imwbcnt +
gndr +
agea +
brncntr, data=df_na)
summary(model_final)
model_final <- lm(euftf_re~eduyrs +
hinctnta +
trstplt +
imwbcnt +
gndr +
agea +
brncntr, data=df_na)
summary(model_final)
cooks_d <- cooks.distance(model_final)
cooks_d
# Plot
par(mar=c(5,4,3,3)) # Reset figure margins
plot(model_final, which=4)
# Get top 10 highest Cook's Distance values
head(sort(cooks_d, decreasing=TRUE),10)
# Calculate threshold
thres <- 4/(nobs(model_final)-(length(coef(model_final))-1)-1)
# Get observations above threshold
which(sort(cooks_d, decreasing=TRUE)>thres)
thres
which(sort(cooks_d, decreasing=TRUE)>thres)
df_na[458,c("euftf_re","edlvdie","hinctnta","trstplt","imwbcnt","gndr","agea","brncntr")]
model_final$fitted.values[458]
model_final$fitted.values
df_na[458,c("euftf_re","edlvdie","hinctnta","trstplt","imwbcnt","gndr","agea","brncntr")]
model_final$fitted.values[458]
df_na[159,c("euftf_re","edlvdie","hinctnta","trstplt","imwbcnt","gndr","agea","brncntr")]
model_final$fitted.values[159]
dfbeta <- dfbeta(model_final)
View(dfbeta)
# Find maximum absolute values for each coefficient
dfbeta[,c("eduyrs")][which.max(abs(dfbeta[,c("eduyrs")]))]
plot(model_final, which=5)
# Histogram of error
hist(model_final$residuals)
# QQ (Quantile-quantile) plot
plot(model_final, which=2)
plot(model_final, which=5)
plot(model_final, which=1)
# What to do if labels of observations are overlapping?
which(model_final$residuals>6.3 & model_final$fitted.values<4.5)
# Residual versus fitted plot
plot(model_final, which=1)
which(model_final$residuals>6.3 & model_final$fitted.values<4.5)
# Scatter plots
plot(df_na$eduyrs,jitter(df_na$euftf_re,2))
plot(df_na$trstplt,jitter(df_na$euftf_re,2))
# Residual plot
residualPlots(model_final)
df_na$trstplt_trstplt <- df_na$trstplt^2
# Fit model
model_quad <- lm(euftf_re~edlvdie +
hinctnta +
trstplt +
trstplt_trstplt +
imwbcnt +
gndr +
agea +
brncntr, data=df_na)
summary(model_quad)
# Correlation matrix
cor(df_na[, c("eduyrs","hinctnta","trstplt","imwbcnt","agea")])
vif(model_final)
# Create a variable with high correlation
cor(df_na$trstplt,df_na$imwbcnt)
df_na$trust_att <- df_na$trstplt + df_na$imwbcnt
cor(df_na$trust_att,df_na$trstplt)
cor(df_na$trust_att,df_na$imwbcnt)
# QQ (Quantile-quantile) plot
plot(model_final, which=2)
